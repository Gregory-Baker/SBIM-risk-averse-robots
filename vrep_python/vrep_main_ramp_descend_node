#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu May 10 19:58:44 2018

@author: greg
"""

#%% Import modules

import vrep
import sys
import numpy as np
import matplotlib.pyplot as plt
import time
import math
from subprocess import Popen, PIPE


#%% Function to start VREP

def initialise_vrep(scene_name: 'str', 
                    vrep_port: 'int', 
                    headless: 'bool',
                    start_sim: 'bool',
                    sim_time: 'int', 
                    quit_vrep_after_sim: 'bool'):
    
    # Defines path to VREP folder
    path_to_vrep = '/home/greg/Programs/V-REP_PRO_EDU_V3_5_0_Linux'
    path_to_scenes = '../vrep_scenes/test_scenes'
    
    # Converts vrep initialisation settings to arguments recognised by vrep
    head_call = ''
    if headless:
        head_call = '-h'
        
    start_sim_call = ''
    if start_sim:
        if sim_time > 0:
            sim_time_milli = int(sim_time*1000)
            start_sim_call = f'-s{sim_time_milli}'
        elif sim_time == 0:
            start_sim_call = '-s'
        else:
            raise ValueError('''sim_time (simulation duration) must be a 
                             positive number, or zero for no time limit''')
           
    quit_after_sim = ''
    if quit_vrep_after_sim:
        quit_after_sim = '-q'
    
    # close all opened connections to vrep
    vrep.simxFinish(-1) 
    
    # Command-line call to initialise vrep
    Popen(["nice", "-n", "-20", f"{path_to_vrep}/vrep.sh", head_call, start_sim_call, quit_after_sim,
           f"-gREMOTEAPISERVERSERVICE_{vrep_port}_FALSE_FALSE", 
           f"{path_to_scenes}/{scene_name}.ttt"], 
            stdout=PIPE, stderr=PIPE)
    
    # Allow vrep to boot before initialising comms
    time.sleep(5)
    
    # Sets up communication between python and vrep
    clientID = vrep.simxStart('127.0.0.1',vrep_port,True,True,10000,5)
    
    if clientID!=-1:
        print('Connected to remote API server')
    else:
        print('Connection not successful')
        sys.exit('Could not connect')
        
    return clientID


#%% Set ePuck position, orientation and velocity

def set_pos_ang(clientID: 'int',
                handle_robot: 'int',
                position: '[x y z] metres',
                angle: 'rad'):
    
    # Set position
    returnCode = vrep.simxSetObjectPosition(
            clientID, handle_robot, -1, position, vrep.simx_opmode_oneshot)
    
    # Convert angle to euler angle
    eulerAngles = [0, 0, angle]
    
    # Set orientation
    returnCode = vrep.simxSetObjectOrientation(
            clientID, handle_robot, -1, eulerAngles, vrep.simx_opmode_oneshot)
    
    
#%% Set wheel velocities
    
def set_vel(clientID: 'int',
            handle: 'int',
            handle_leftJoint: 'int', 
            handle_rightJoint: 'int',
            linear_velocity: 'm/s',
            angular_velocity: 'rad/sec'):
    
    # ePuck geometric parameters
    wheel_sep = 0.053   # distance between wheels (m)
    wheel_rad = 0.02    # radius of wheels (m)
    
    # Convert to wheel velocities
    vel_r = linear_velocity + wheel_sep*angular_velocity/2
    vel_l = linear_velocity - wheel_sep*angular_velocity/2
    
    # Convert to wheel angular veolocities
    omega_r = vel_r/wheel_rad
    omega_l = vel_l/wheel_rad
    
    returnCode = vrep.simxSetJointTargetVelocity(
                clientID, handle_leftJoint, omega_l, vrep.simx_opmode_streaming)
    
    returnCode = vrep.simxSetJointTargetVelocity(
                clientID, handle_rightJoint, omega_r, vrep.simx_opmode_streaming)
    
#%% Function: move to target
    
def move_to_target(clientID,
                   handle_robot,
                   handle_force_sensor,
                   handle_leftJoint,
                   handle_rightJoint,
                   linear_velocity,
                   target: '[x y] metres',
                   proximity_to_target = 0.05):

#    cmdTimeAll = []
#    forceMagLinkAll = []
    
    returnCode, position = vrep.simxGetObjectPosition(
            clientID, handle_robot, -1, vrep.simx_opmode_buffer)
    
    pos_start_2d = np.array([position[0], position[1]])
    pos_target_2d = np.array([target[0], target[1]])
    dist_to_target = np.linalg.norm(pos_target_2d - pos_start_2d)
    
    time_step = 0.02

    while dist_to_target > proximity_to_target:

        time.sleep(time_step)
        
        returnCode, state, forceVectorLink, torqueVector = vrep.simxReadForceSensor(
                clientID, handle_force_sensor, vrep.simx_opmode_buffer)
        forceMagLink = np.linalg.norm(forceVectorLink)
        
        returnCode, eulerAngles = vrep.simxGetObjectOrientation(
                clientID, handle_robot, -1, vrep.simx_opmode_buffer)
        
        returnCode, position = vrep.simxGetObjectPosition(
                clientID, handle_robot, -1, vrep.simx_opmode_buffer)
        
        xCurrent = position[0]
        yCurrent = position[1]
        
        pos_current_2d = np.array([xCurrent, yCurrent])
        
        xDelta = target[0] - xCurrent
        yDelta = target[1] - yCurrent
        
        phi_current = eulerAngles[2]
        phi_target = math.atan2(yDelta, xDelta)
        phi_delta = phi_target - phi_current
        
        if phi_delta < -math.pi:
            phi_delta = phi_delta + 2*math.pi
        elif phi_delta > math.pi:
            phi_delta = phi_delta - 2*math.pi
            
        
        cmdTime = vrep.simxGetLastCmdTime(clientID)
        
        if forceMagLink < 100:
#            forceMagLinkAll.append(forceMagLink)
#            cmdTimeAll.append(cmdTime/1000)
    
            if forceMagLink > 0.4:
                print('collision!')
                return 1
            elif cmdTime >= sim_time*1000:
                print('timeout')
                return 2
            else:
                set_vel(clientID, handle_robot, handle_leftJoint, handle_rightJoint, 
                        linear_velocity, 2*phi_delta)
                
        dist_to_target = np.linalg.norm(pos_target_2d - pos_current_2d)
    
    return 0
        
    # Plot force sensor graph
#    fig1 = plt.figure()
#    ax1 = fig1.add_subplot(1,1,1)
#    ax1.plot(cmdTimeAll,forceMagLinkAll)
#    plt.show()
    
#%% function: turn to target
    
def turn_to_target(clientID,
                   handle_robot,
                   handle_leftJoint,
                   handle_rightJoint,
                   target: '[x y] metres'):
    
    returnCode, eulerAngles = vrep.simxGetObjectOrientation(
            clientID, handle_robot, -1, vrep.simx_opmode_buffer)
    
    returnCode, position = vrep.simxGetObjectPosition(
            clientID, handle_robot, -1, vrep.simx_opmode_buffer)
    
    xDelta = target[0] - position[0]
    yDelta = target[1] - position[1]
        
    phi_current = eulerAngles[2]
    phi_target = math.atan2(yDelta, xDelta)
    phi_delta = phi_target - phi_current
    print(phi_delta)

    while abs(phi_delta) > 0.1:
        
        returnCode, eulerAngles = vrep.simxGetObjectOrientation(
                clientID, handle_robot, -1, vrep.simx_opmode_buffer)
        
        returnCode, position = vrep.simxGetObjectPosition(
                clientID, handle_robot, -1, vrep.simx_opmode_buffer)
    
        xDelta = target[0] - position[0]
        yDelta = target[1] - position[1]
        
        phi_current = eulerAngles[2]
        phi_target = math.atan2(yDelta, xDelta)
        phi_delta = phi_target - phi_current
        
        if phi_delta > 0:
            omega = 2
        else:
            omega = -2

        set_vel(clientID, handle_robot, handle_leftJoint, handle_rightJoint, 
                0, omega)

#%% Setup Weights for path plan

def setup_weights(start: '[x y]',
                  target: '[x y]',
                  arena_dimensions = [2, 1.5],
                  node_spacing = 0.1):
    
    arena_length_x = arena_dimensions[0]
    arena_length_y = arena_dimensions[1]
    
    x_num = int(round(arena_length_x/node_spacing-1))
    y_num = int(round(arena_length_y/node_spacing-1))
    
    x_coords = np.linspace(0, arena_length_x, x_num+2)
    y_coords = np.linspace(0, arena_length_y, y_num+2)
    
    coords = np.zeros((x_num+2, y_num+2, 2))
    weights = np.zeros((x_num+2, y_num+2))
    
    for i in range(1, x_num+1):
        for j in range(1, y_num+1):
            coords[i,j,0] = x_coords[i]
            coords[i,j,1] = y_coords[j]
            weights[i,j] = math.sqrt((x_coords[i]-target[0])**2 + (y_coords[j]-target[1])**2)
    
#    for i in range(1,x_num+1):
#        for j in range(1,y_num+1):
#            k = 0
#            weight_sum = 0
#            for x_delta in range(-1,2):
#                for y_delta in range(-1,2):
#                    euc_x_index = i+x_delta
#                    euc_y_index = j+y_delta
#                    if ((euc_x_index in (0, x_num+1)) or (euc_y_index in (0, y_num+1)) or (x_delta == 0 and y_delta == 0)):
#                        weights[i,j,k] = 0
#                    else:
#                        weights[i,j,k] = 1 / (euc_dist_to_targ[euc_x_index, euc_y_index])
#                        weight_sum += 1 / (euc_dist_to_targ[euc_x_index, euc_y_index])
#                    k += 1
#            for k in range(0,9):
#                weights[i,j,k] = weights[i,j,k] / weight_sum
#    
    return weights, coords

#%% Path Plan
        
def path_plan(start: '[x y]',
              target: '[x y]',
              coords: 'numpy matrix',
              weights: 'numpy matrix',
              node_spacing=0.1):
    
    start_index = [int(round(start[0]/node_spacing)), int(round(start[1]/node_spacing))]
    target_index = [int(round(target[0]/node_spacing)), int(round(target[1]/node_spacing))]           
    
    x_int_start_ind = start_index[0]
    y_int_start_ind = start_index[1]
    
    path = [start_index]
    directions = []
    weights_neigh = np.zeros(9)
    
    while x_int_start_ind != target_index[0] or y_int_start_ind != target_index[1]:
        
        k = 0
        weights_cum = 0
        for x_delta in range(-1,2):
            for y_delta in range(-1,2):
                if x_delta != 0 or y_delta != 0:
                    x_neigh = x_int_start_ind + x_delta
                    y_neigh = y_int_start_ind + y_delta
                    weights_neigh[k] = weights[x_neigh, y_neigh]
                    weights_cum += weights_neigh[k]
                k += 1
        
        weights_neigh_norm = 0
      
        rand_num = np.random.rand()
        
        k = 0
        for weight in weights_neigh:
            weights_neigh_norm += weight/weights_cum
            if rand_num < weights_neigh_norm:
                directions.append(k)
                delta = neighbour_delta(k)
                break
            k += 1
        
        x_int_targ_ind = x_int_start_ind + delta[0]
        y_int_targ_ind = y_int_start_ind + delta[1]
        
        path.append([x_int_targ_ind, y_int_targ_ind])
        
        x_int_start_ind = x_int_targ_ind
        y_int_start_ind = y_int_targ_ind
        print(f'everywhere: {path}')
    
        
    path_np = np.array(path)
    path_coords = np.zeros((len(path_np),2))
    
    for i in range(0, len(path_np)-2):
        for j in range(len(path_np)-1, i+1,-1):
            if j >= len(path_np)-1:
                continue
            if np.logical_and(*np.equal(path_np[i],path_np[j])):
                print(f'removing loop between path points {i} and {j}')
                for k in range(i, j):
                    path_np = np.delete(path_np, (i), axis = 0)
                    del directions[i]
    
    for i in range(0, len(path_np)-3):
        for j in range(len(path_np)-1, i+1,-1):
            if j >= len(path_np)-1:
                continue
            x_i = path_np[i,0]
            y_i = path_np[i,1]
            x_j = path_np[j,0]
            y_j = path_np[j,1]
            k = 0
            for x_delta in range(-1,2):
                for y_delta in range(-1,2):
                    x_i_neigh = x_i + x_delta
                    y_i_neigh = y_i + y_delta
                    if x_i_neigh == x_j and y_i_neigh == y_j:
                        if weights[x_i, y_i] > 0.1:
                            print(f'taking a shortcut from point {i} to point {j}')
                            for h in range(i+1, j):
                                path_np = np.delete(path_np, (i+1), axis = 0)
                                del directions[i]
                            del directions[i]
                            directions.insert(i, k)
                    k += 1
                        
                    
    path_coords = np.zeros((len(path_np),2))
    
    for i in range(0,len(path_np)):
        path_coords[i,0] = coords[path_np[i,0], path_np[i,1],0]
        path_coords[i,1] = coords[path_np[i,0], path_np[i,1],1]
    
    return path_coords, directions

#%% Plot path

def plot_path(coords,
              start,
              target,
              path_coords,
              arena_dimensions = [2, 1.5],
              crash_point = [0, 0]):
    
    arena_length_x = arena_dimensions[0]
    arena_length_y = arena_dimensions[1]
    
    fig = plt.figure()
    ax1 = fig.add_subplot(1,1,1)

    for i in range(0, np.shape(coords)[0]):
        for j in range(0, np.shape(coords)[1]):
            ax1.scatter(coords[i,j,0], coords[i,j,1], c='k', marker='.', s=10)
    
    arena = np.array([[0,0],[0, arena_length_y],[arena_length_x, arena_length_y],[arena_length_x, 0],[0,0]])
    
    ax1.scatter(start[0], start[1], c='g', marker='8', s=200)
    ax1.scatter(target[0], target[1], c='g', marker='X', s=200)
    ax1.plot(arena[:,0], arena[:,1])
    ax1.plot(path_coords[:,0], path_coords[:,1])
    
    if crash_point[0] != 0 and crash_point[1] != 0:
        ax1.scatter(crash_point[0], crash_point[1], c='r', marker='X', s=200)
    
    plt.show()
    
#%% Neighbour paths
    
def neighbour_paths(k):
    
    if k == 0: n = [1,3]
    elif k == 1: n = [0,2]
    elif k == 2: n = [1,5]
    elif k == 3: n = [0,6]
    elif k == 4: print('k should not be 4')
    elif k == 5: n = [2,8]
    elif k == 6: n = [3,7]
    elif k == 7: n = [6,8]
    elif k == 8: n = [7,5]
    
    return n

def neighbour_delta(n):
    
    k = 0
    for x_delta in range(-1,2):
        for y_delta in range(-1,2):
            if k == n:
                return np.array([x_delta, y_delta])
            k += 1

#%% Reweight function
            
def reweight(weights,
             indices: '[x, y]',
             weight_power):
    
    i = indices[0]
    j = indices[1]

    weights[i,j] = weights[i,j]/weight_power

    return weights

    
#%% Main script
    
answer = 0
while answer == 0:
    
    start_sim = False
    start_vrep = input("Start a new vrep session, y/n? ")
    if start_vrep == 'y':
        # initialise vrep
        headless = False
        quit_after_sim = False
        sim_time = 0
        
        headless_yn = input("Headless? y/n ")
        if headless_yn == 'y':
            headless = True
            start_sim_yn = input("Start the simulation immediately? y/n ")
            if start_sim_yn == 'y':
                start_sim = True
            quit_after_sim_yn = input("Quit V-REP after the simulation? y/n ")
            if quit_after_sim_yn == 'y':
                quit_after_sim = True
                
        sim_time = int(input('Enter the duration of the simulation (seconds): '))
        
        clientID = initialise_vrep(
                    'epuck_arena_ramps3', 19999, headless, start_sim, 0, quit_after_sim)
        answer = 1
    elif start_vrep == 'n':
        sim_time = int(input('Enter the duration of the simulation (seconds): '))
        clientID = 0
        answer = 1
    else:
        print("please type 'y' to start vrep or 'n' to use open vrep program\n")            
            
#%% Get all object handles

ts1 = time.time()

returnCode, handles, intData, floatData, stringData = vrep.simxGetObjectGroupData(
        clientID, vrep.sim_appobj_object_type, 0, vrep.simx_opmode_blocking)

for i in range(len(handles)):
    exec(stringData[i] + f"={handles[i]}")

    
#%% Setup streaming calls

returnCode, linearVelocity, angularVelocity = vrep.simxGetObjectVelocity(
        clientID, ePuck, vrep.simx_opmode_streaming)

returnCode, state, forceVectorLink, torqueVector = vrep.simxReadForceSensor(
        clientID, ePuck_link, vrep.simx_opmode_streaming)

returnCode, eulerAngles = vrep.simxGetObjectOrientation(
        clientID, ePuck, -1, vrep.simx_opmode_streaming)

returnCode, position = vrep.simxGetObjectPosition(
        clientID, ePuck, -1, vrep.simx_opmode_streaming)
    
    
#%% Set initial posiition, orientation and velocity parameters of the ePuck

arena_dimensions = [2, 1.5]

start = [1.0, 0.5]
target = [0.3, 0.3]

pos_init = [start[0], start[1], 0.21915] # initial position of ePuck
ang_init = math.pi/2 # angle of ePuck from the x-axis (rad)
    
set_pos_ang(clientID, ePuck, pos_init, ang_init)

#%% Path Plan

node_spacing = 0.1
weights, coords = setup_weights(start, target, node_spacing=node_spacing)

#%% Run simulation

if start_sim != True:
    start_sim = input("Start the simulation, press Enter (or n to cancel): ")
    if start_sim == 'n':
        sys.exit()
    
outcome = 0
target_no = 1
path_coords = []


while outcome != 0 or target_no != len(path_coords):
    
    path_coords, directions = path_plan(start, target, coords, weights, node_spacing)
    plot_path(coords, start, target, path_coords)
    
    returnCode = vrep.simxStartSimulation(clientID, vrep.simx_opmode_oneshot)
    
    outcome = 0
    target_no = 1
    
    turn_to_target(clientID, ePuck, ePuck_leftJoint, ePuck_rightJoint, 
           path_coords[target_no,:])

    while outcome == 0 and target_no < len(path_coords):
        outcome = move_to_target(clientID, ePuck, ePuck_link, ePuck_leftJoint, 
                                 ePuck_rightJoint, 0.1, path_coords[target_no,:], 0.05)
        if outcome == 0:
            target_no += 1
    
    returnCode = vrep.simxStopSimulation(clientID, vrep.simx_opmode_oneshot)
            
    if outcome != 0:
        i = int(path_coords[target_no,0]/node_spacing) # x index of path point before crash
        j = int(path_coords[target_no,1]/node_spacing) # y index of path point before crash
        
        # severity of reweighting based upon 
        if outcome == 1:
            weight_power = 4
            weights = reweight(weights, [i, j], weight_power)
        elif outcome == 2:
            weight_power = 2
            weights = reweight(weights, [i, j], weight_power)
        
    else:        
        target_no = 1
        plot_path(coords, start, target, path_coords)
        
        returnCode = vrep.simxStartSimulation(clientID, vrep.simx_opmode_oneshot)
        
        turn_to_target(clientID, ePuck, ePuck_leftJoint, ePuck_rightJoint, 
           path_coords[target_no,:])
        
        while outcome == 0 and target_no < len(path_coords):
            outcome = move_to_target(clientID, ePuck, ePuck_link, ePuck_leftJoint, 
                                     ePuck_rightJoint, 0.1, path_coords[target_no,:], 0.05)
            
            if outcome == 0:
                target_no += 1
            
        returnCode = vrep.simxStopSimulation(clientID, vrep.simx_opmode_oneshot)
        
    print(weights[10,5])
            

set_vel(clientID, ePuck, ePuck_leftJoint, ePuck_rightJoint, 0, 0)

print(f'outcome: {outcome}')
print(path_coords)

cmdTime = vrep.simxGetLastCmdTime(clientID)
ts2 = time.time()
real_time_lapsed = ts2-ts1
print(f'Simulation Time: {cmdTime/1000}')
print(f'Real Time: {real_time_lapsed}')  


